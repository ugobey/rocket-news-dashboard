<!DOCTYPE html>

<html>

<head>
    <title>
        <%-title%>
    </title>

    <link href="/css/bootstrap-5.3.3/bootstrap.min.css" rel="stylesheet">

    <script src="/js/jquery-3.7.1.min.js"></script>
    <script src="/js/bootstrap-5.3.3/bootstrap.bundle.min.js"></script>
    <script src="/js/moment-2.30.1.min.js"></script>

    <style>
        html {
            font-size: 12px;
            background-color: #212529;
        }

        @media (max-width: 1680px) {
            html {
                font-size: 12px;
            }
        }

        @media (max-width: 1440px) {
            html {
                font-size: 12px;
            }
        }
    </style>

</head>

<body>



    <!-- MAIN CONTENT -->



    <div class="row gx-1 bg-dark">
        <div class="col">
            <div class="p-1 border bg-danger">
                <font color="#FFFFFF"><b>Pikud HaOref Alerts</b>
                    <font style="display: none;" id="counter">(<font color="#FFFFFF" id="pikudHaorefCounter"></font>)</font>
                </font>
            </div>

            <div class="col-20 table-responsive">
                <table class="table table-sm table-dark">
                    <tbody id="pikud_haoref_alerts"></tbody>

                </table>

            </div>

        </div>
        <div class="col">
            <div class="p-1 border bg-primary">
                <font color="#FFFFFF"><b>News Updates</b> -
                    <select id="rssFeedSelector">
                        <option value="-">Select RSS Feed To Start</option>
                        <option value="RSSarutz7">Arutz 7 - Israel National News</option>
                        <option value="RSSjerusalemPost">Jerusalem Post</option>
                        <option value="RSSynet">Ynet News</option>
                    </select>
            </div>

            <div class="col-20 table-responsive">
                <table class="table table-sm table-dark">
                    <tbody id="rss_alerts"></tbody>

                </table>

            </div>
        </div>
    </div>

    <!-- end content -->

    <script>

        let rssFeedSelected;
        let rssFeedPollStarted = false;

        $("#rssFeedSelector").on("change", function () {
            const feed = $("#rssFeedSelector").val()

            if (feed != "-") {
                $("#rssFeedSelector option[value='-']").remove();
                rssFeedSelected = feed;

                if (!rssFeedPollStarted) {
                    rssFeedPollStarted = true;
                    rssPoll();
                }
            }
        });

        async function ajaxHandler(service) {
            let response = "";

            $.ajax({
                url: "/ajax",
                type: "POST",
                data: {
                    "service": service,
                    "rssfeed": rssFeedSelected
                },
                async: false,
                dataType: "json",
                success: function (result) {
                    response = result;
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    console.log(XMLHttpRequest, textStatus, errorThrown)
                }
            });

            return response;
        }

        setInterval(() => {
            $(".alertNewRow").removeClass("table-light");
            $(".alertNewRow").removeClass("alertNewRow");

            $(".rssNewRow").removeClass("table-light");
            $(".rssNewRow").removeClass("rssNewRow");
        }, 5000);

        //Pikud HaOref service

        fetch('/json/cities.json')
            .then((response) => response.json())
            .then((data) => {
                const citiesJSON = data;

                const pikudHaorefInterval = 7000;
                const recentlyAlertedCities = {};
                let pikudHaorefCounter = 0;
                let pikudHaorefAlert = false;

                function getAlertTypeByCategory(type) {
                    switch (type) {
                        case "missiles":
                            return "Rocket Alert";
                        case "general":
                            return "General Alert";
                        case "earthQuake":
                            return "Earthquake Alert";
                        case "radiologicalEvent":
                            return "Radiological Alert";
                        case "tsunami":
                            return "Tsunami Alert";
                        case "hostileAircraftIntrusion":
                            return "Hostile Aircraft Alert";
                        case "hazardousMaterials":
                            return "Hazardous Materials Alert";
                        case "terroristInfiltration":
                            return "Terrorist Infiltration Alert";
                        case "missilesDrill":
                            return "Drill - Rocket Alert";
                        case "generalDrill":
                            return "Drill  - General Alert";
                        case "earthQuakeDrill":
                            return "Drill - Earthquake Alert";
                        case "radiologicalEventDrill":
                            return "Drill - Radiological Alert";
                        case "tsunamiDrill":
                            return "Drill - Tsunami Alert";
                        case "hostileAircraftIntrusionDrill":
                            return "Drill - Hostile Aircraft Alert";
                        case "hazardousMaterialsDrill":
                            return "Drill - Hazardous Materials";
                        case "terroristInfiltrationDrill":
                            return "Drill - Terrorist Infiltration Alert";
                        default:
                            return "No Alert";
                    }
                }

                function extractNewCities(alertCities) {
                    const newCities = [];
                    const now = Math.floor(Date.now() / 1000);

                    for (let city of alertCities) {
                        if (!recentlyAlertedCities[city] || recentlyAlertedCities[city] < now - 60) {
                            newCities.push(city);
                            recentlyAlertedCities[city] = now;
                        }
                    }

                    return newCities;
                }

                const pikudHaorefPoll = async function () {
                    setTimeout(pikudHaorefPoll, pikudHaorefInterval);

                    const alert = await ajaxHandler("pikud_haoref");

                    if (alert.error) {
                        if (alert.error.indexOf("403 Forbidden") > -1) {
                            $("#pikud_haoref_alerts").prepend("<tr><td><font class='text-danger'>ERROR:</font> 403 Forbidden - Requires Israeli IP</td></tr>");
                        }
                        else {
                            $("#pikud_haoref_alerts").prepend("<tr><td><font class='text-danger'>ERROR:</font> " + alert.error + "</td></tr>");
                        }
                        return;
                    }

                    const alertType = alert.type;
                    if (alertType) {
                        const alertTypeText = getAlertTypeByCategory(alertType);
                        const timeStamp = moment().format("MMM Do YYYY, h:mm:ss a");

                        if (alertType != "none") {
                            if (!pikudHaorefAlert) {
                                pikudHaorefAlert = true;
                                $("#counter").show();
                            }

                            const cities = extractNewCities(alert.cities);
                            const instructions = alert.instructions;

                            if (cities) {
                                for (let i = 0; i < cities.length; i++) {
                                    const cityOriginal = cities[i];
                                    let city = cities[i];

                                    for (let c = 0; c < citiesJSON.length; c++) {
                                        if (citiesJSON[c].value === city) {
                                            city = citiesJSON[c].name_en;
                                            break;
                                        }
                                    }

                                    if (city) {
                                        pikudHaorefCounter++
                                        $("#pikudHaorefCounter").text(pikudHaorefCounter)
                                        $("#pikud_haoref_alerts").prepend("<tr class='alertNewRow table-light'><td><font class='text-info'>" + alertTypeText + "</font></td><td>" + city + " (" + cityOriginal + ")</td><td><font class='text-warning'>" + timeStamp + "</font></td></tr>");
                                    }
                                }
                            }
                        }
                    }
                };

                pikudHaorefPoll();
            })
            .catch((error) => {
                console.error('Error Fetching JSON File:', error);
            });




        //RSS service
        const newsArray = [];
        const rssInterval = 60000;
        const rssPoll = async function () {

            setTimeout(rssPoll, rssInterval);

            if (rssFeedSelected) {
                let reversedArray = [];

                const news = await ajaxHandler("rss", rssFeedSelected);

                if (news.error) {
                    console.log(news.error);
                    $("#rss_alerts").prepend("<tr><td>" + news.error + "</td></tr>");
                    return;
                }

                news.feed.items.forEach((item) => {
                    reversedArray.push({ pubDate: item.pubDate, title: item.title });
                });

                reversedArray = reversedArray.reverse();

                reversedArray.forEach((item) => {

                    const publishDate = moment(item.pubDate).format("MMM Do YYYY, h:mm:ss a");
                    const publishDay = moment(item.pubDate).format("MMM Do YYYY");
                    const currentDay = moment().format("MMM Do YYYY");

                    const today = moment();
                    const yesterday = moment(today.startOf("day")).set(
                        "date",
                        today.get("date") - 1
                    );
                    const yesterDay = yesterday.format("MMM Do YYYY");

                    if (publishDay === currentDay || publishDay === yesterDay) {
                        if (!newsArray.includes(publishDate + " : " + item.title)) {
                            newsArray.push(publishDate + " : " + item.title);

                            $("#rss_alerts").prepend("<tr class='rssNewRow table-light'><td>" + item.title + "</td><td><font class='text-warning'>" + publishDate + "</font></td></tr>");
                        }
                    }
                });
            }
        };
    </script>


</body>

</html>